{
  "id": "executeautomation/mcp-playwright",
  "server_name": "playwright",
  "content_name": "mcp playwright",
  "website": "https://github.com/executeautomation/mcp-playwright",
  "content": "<div align=\"center\" markdown=\"1\">\n   <sup>Special thanks to:</sup>\n   <br>\n   <br>\n   <a href=\"https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=mcp-playwright\">\n      <img alt=\"Warp sponsorship\" width=\"400\" src=\"https://github.com/user-attachments/assets/ab8dd143-b0fd-4904-bdc5-dd7ecac94eae\">\n   </a>\n\n### [Warp, the AI terminal for developers](https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=mcp-playwright)\n[Available for MacOS, Linux, & Windows](https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=mcp-playwright)<br>\n\n</div>\n<hr>\n\n# Playwright MCP Server \n\n[![smithery badge](https://smithery.ai/badge/@executeautomation/playwright-mcp-server)](https://smithery.ai/server/@executeautomation/playwright-mcp-server)\n\nA Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, generate test code, web scraps the page and execute JavaScript in a real browser environment.\n\n<a href=\"https://glama.ai/mcp/servers/yh4lgtwgbe\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/yh4lgtwgbe/badge\" alt=\"mcp-playwright MCP server\" /></a>\n\n## Screenshot\n![Playwright + Claude](image/playwright_claude.png)\n\n## [Documentation](https://executeautomation.github.io/mcp-playwright/) | [API reference](https://executeautomation.github.io/mcp-playwright/docs/playwright-web/Supported-Tools)\n\n## Installation\n\nYou can install the package using either npm, mcp-get, or Smithery:\n\nUsing npm:\n```bash\nnpm install -g @executeautomation/playwright-mcp-server\n```\n\nUsing mcp-get:\n```bash\nnpx @michaellatman/mcp-get@latest install @executeautomation/playwright-mcp-server\n```\nUsing Smithery\n\nTo install Playwright MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@executeautomation/playwright-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @executeautomation/playwright-mcp-server --client claude\n```\n#### Installation in VS Code\n\nInstall the Playwright MCP server in VS Code using one of these buttons:\n\n<!--\n// Generate using?:\nconst config = JSON.stringify({ name: 'playwright', command: 'npx', args: [\"-y\", \"@executeautomation/playwright-mcp-server\"] });\nconst urlForWebsites = `vscode:mcp/install?${encodeURIComponent(config)}`;\n// Github markdown does not allow linking to `vscode:` directly, so you can use our redirect:\nconst urlForGithub = `https://insiders.vscode.dev/redirect?url=${encodeURIComponent(urlForWebsites)}`;\n-->\n\n[<img src=\"https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF\" alt=\"Install in VS Code\">](https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540executeautomation%252Fplaywright-mcp-server%2522%255D%257D) \n[<img alt=\"Install in VS Code Insiders\" src=\"https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5\">](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540executeautomation%252Fplaywright-mcp-server%2522%255D%257D)\n\nAlternatively, you can install the Playwright MCP server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@executeautomation/playwright-mcp-server\"]}'\n```\n\n```bash\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@executeautomation/playwright-mcp-server\"]}'\n```\n\nAfter installation, the ExecuteAutomation Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n## Configuration to use Playwright Server\nHere's the Claude Desktop configuration to use the Playwright server:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@executeautomation/playwright-mcp-server\"]\n    }\n  }\n}\n```\n\n## SSE (Server-Sent Events) Support\n\nPlaywright MCP Server now supports real-time event streaming via Server-Sent Events (SSE).\n\n### How to Use\n\n- The server exposes an SSE endpoint at `http://localhost:3001/events`.\n- You can connect to this endpoint using any SSE-compatible client (such as EventSource in the browser or curl).\n- Events are sent in real-time as they occur (e.g., new console logs, screenshots, etc.).\n\n### Example (JavaScript)\n```js\nconst evtSource = new EventSource('http://localhost:3001/events');\nevtSource.addEventListener('console_log_entry', (event) => {\n  const data = JSON.parse(event.data);\n  console.log('Console log:', data.log);\n});\nevtSource.addEventListener('screenshot', (event) => {\n  const data = JSON.parse(event.data);\n  console.log('Screenshot event:', data);\n});\n```\n\n### Available Events\n- `console_log_entry`: Fired when a new console log is captured.\n- `console_logs`: Fired when all logs are requested.\n- `screenshot`: Fired when a screenshot is taken or requested.\n\nThis allows you to build real-time dashboards, monitoring tools, or simply observe browser activity as it happens.\n\n## Testing\n\nThis project uses Jest for testing. The tests are located in the `src/__tests__` directory.\n\n### Running Tests\n\nYou can run the tests using one of the following commands:\n\n```bash\n# Run tests using the custom script (with coverage)\nnode run-tests.cjs\n\n# Run tests using npm scripts\nnpm test           # Run tests without coverage\nnpm run test:coverage  # Run tests with coverage\nnpm run test:custom    # Run tests with custom script (same as node run-tests.cjs)\n```\n\nThe test coverage report will be generated in the `coverage` directory.\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=executeautomation/mcp-playwright&type=Date)](https://star-history.com/#executeautomation/mcp-playwright&Date)",
  "abstract": "Automate web browsers for testing, scraping, and visual analysis.",
  "field": "MCP SERVER",
  "subfield": "MCP SERVER",
  "category": "Browser",
  "publisher_id": "executeautomation",
  "thumbnail_picture": "",
  "external_url": "",
  "github": "https://github.com/executeautomation/mcp-playwright",
  "mcp_server_config": "[{\"mcpServers\": {\"playwright\": {\"command\": \"npx\", \"args\": [\"-y\", \"@executeautomation/playwright-mcp-server\"]}}}]",
  "tools": [
    {
      "name": "start_codegen_session",
      "description": "Start a new code generation session to record Playwright actions",
      "input_schema": {
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Code generation options",
            "properties": {
              "outputPath": {
                "type": "string",
                "description": "Directory path where generated tests will be saved (use absolute path)"
              },
              "testNamePrefix": {
                "type": "string",
                "description": "Prefix to use for generated test names (default: 'GeneratedTest')"
              },
              "includeComments": {
                "type": "boolean",
                "description": "Whether to include descriptive comments in generated tests"
              }
            },
            "required": [
              "outputPath"
            ]
          }
        },
        "required": [
          "options"
        ]
      }
    },
    {
      "name": "end_codegen_session",
      "description": "End a code generation session and generate the test file",
      "input_schema": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "ID of the session to end"
          }
        },
        "required": [
          "sessionId"
        ]
      }
    },
    {
      "name": "get_codegen_session",
      "description": "Get information about a code generation session",
      "input_schema": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "ID of the session to retrieve"
          }
        },
        "required": [
          "sessionId"
        ]
      }
    },
    {
      "name": "clear_codegen_session",
      "description": "Clear a code generation session without generating a test",
      "input_schema": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "ID of the session to clear"
          }
        },
        "required": [
          "sessionId"
        ]
      }
    },
    {
      "name": "playwright_navigate",
      "description": "Navigate to a URL",
      "input_schema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to navigate to the website specified"
          },
          "browserType": {
            "type": "string",
            "description": "Browser type to use (chromium, firefox, webkit). Defaults to chromium",
            "enum": [
              "chromium",
              "firefox",
              "webkit"
            ]
          },
          "width": {
            "type": "number",
            "description": "Viewport width in pixels (default: 1280)"
          },
          "height": {
            "type": "number",
            "description": "Viewport height in pixels (default: 720)"
          },
          "timeout": {
            "type": "number",
            "description": "Navigation timeout in milliseconds"
          },
          "waitUntil": {
            "type": "string",
            "description": "Navigation wait condition"
          },
          "headless": {
            "type": "boolean",
            "description": "Run browser in headless mode (default: false)"
          }
        },
        "required": [
          "url"
        ]
      }
    },
    {
      "name": "playwright_screenshot",
      "description": "Take a screenshot of the current page or a specific element",
      "input_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the screenshot"
          },
          "selector": {
            "type": "string",
            "description": "CSS selector for element to screenshot"
          },
          "width": {
            "type": "number",
            "description": "Width in pixels (default: 800)"
          },
          "height": {
            "type": "number",
            "description": "Height in pixels (default: 600)"
          },
          "storeBase64": {
            "type": "boolean",
            "description": "Store screenshot in base64 format (default: true)"
          },
          "fullPage": {
            "type": "boolean",
            "description": "Store screenshot of the entire page (default: false)"
          },
          "savePng": {
            "type": "boolean",
            "description": "Save screenshot as PNG file (default: false)"
          },
          "downloadsDir": {
            "type": "string",
            "description": "Custom downloads directory path (default: user's Downloads folder)"
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "name": "playwright_click",
      "description": "Click an element on the page",
      "input_schema": {
        "type": "object",
        "properties": {
          "selector": {
            "type": "string",
            "description": "CSS selector for the element to click"
          }
        },
        "required": [
          "selector"
        ]
      }
    },
    {
      "name": "playwright_iframe_click",
      "description": "Click an element in an iframe on the page",
      "input_schema": {
        "type": "object",
        "properties": {
          "iframeSelector": {
            "type": "string",
            "description": "CSS selector for the iframe containing the element to click"
          },
          "selector": {
            "type": "string",
            "description": "CSS selector for the element to click"
          }
        },
        "required": [
          "iframeSelector",
          "selector"
        ]
      }
    },
    {
      "name": "playwright_iframe_fill",
      "description": "Fill an element in an iframe on the page",
      "input_schema": {
        "type": "object",
        "properties": {
          "iframeSelector": {
            "type": "string",
            "description": "CSS selector for the iframe containing the element to fill"
          },
          "selector": {
            "type": "string",
            "description": "CSS selector for the element to fill"
          },
          "value": {
            "type": "string",
            "description": "Value to fill"
          }
        },
        "required": [
          "iframeSelector",
          "selector",
          "value"
        ]
      }
    },
    {
      "name": "playwright_fill",
      "description": "fill out an input field",
      "input_schema": {
        "type": "object",
        "properties": {
          "selector": {
            "type": "string",
            "description": "CSS selector for input field"
          },
          "value": {
            "type": "string",
            "description": "Value to fill"
          }
        },
        "required": [
          "selector",
          "value"
        ]
      }
    },
    {
      "name": "playwright_select",
      "description": "Select an element on the page with Select tag",
      "input_schema": {
        "type": "object",
        "properties": {
          "selector": {
            "type": "string",
            "description": "CSS selector for element to select"
          },
          "value": {
            "type": "string",
            "description": "Value to select"
          }
        },
        "required": [
          "selector",
          "value"
        ]
      }
    },
    {
      "name": "playwright_hover",
      "description": "Hover an element on the page",
      "input_schema": {
        "type": "object",
        "properties": {
          "selector": {
            "type": "string",
            "description": "CSS selector for element to hover"
          }
        },
        "required": [
          "selector"
        ]
      }
    },
    {
      "name": "playwright_evaluate",
      "description": "Execute JavaScript in the browser console",
      "input_schema": {
        "type": "object",
        "properties": {
          "script": {
            "type": "string",
            "description": "JavaScript code to execute"
          }
        },
        "required": [
          "script"
        ]
      }
    },
    {
      "name": "playwright_console_logs",
      "description": "Retrieve console logs from the browser with filtering options",
      "input_schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of logs to retrieve (all, error, warning, log, info, debug, exception)",
            "enum": [
              "all",
              "error",
              "warning",
              "log",
              "info",
              "debug",
              "exception"
            ]
          },
          "search": {
            "type": "string",
            "description": "Text to search for in logs (handles text with square brackets)"
          },
          "limit": {
            "type": "number",
            "description": "Maximum number of logs to return"
          },
          "clear": {
            "type": "boolean",
            "description": "Whether to clear logs after retrieval (default: false)"
          }
        },
        "required": []
      }
    },
    {
      "name": "playwright_close",
      "description": "Close the browser and release all resources",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      }
    },
    {
      "name": "playwright_get",
      "description": "Perform an HTTP GET request",
      "input_schema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to perform GET operation"
          }
        },
        "required": [
          "url"
        ]
      }
    },
    {
      "name": "playwright_post",
      "description": "Perform an HTTP POST request",
      "input_schema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to perform POST operation"
          },
          "value": {
            "type": "string",
            "description": "Data to post in the body"
          },
          "token": {
            "type": "string",
            "description": "Bearer token for authorization"
          },
          "headers": {
            "type": "object",
            "description": "Additional headers to include in the request",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "url",
          "value"
        ]
      }
    },
    {
      "name": "playwright_put",
      "description": "Perform an HTTP PUT request",
      "input_schema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to perform PUT operation"
          },
          "value": {
            "type": "string",
            "description": "Data to PUT in the body"
          }
        },
        "required": [
          "url",
          "value"
        ]
      }
    },
    {
      "name": "playwright_patch",
      "description": "Perform an HTTP PATCH request",
      "input_schema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to perform PUT operation"
          },
          "value": {
            "type": "string",
            "description": "Data to PATCH in the body"
          }
        },
        "required": [
          "url",
          "value"
        ]
      }
    },
    {
      "name": "playwright_delete",
      "description": "Perform an HTTP DELETE request",
      "input_schema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to perform DELETE operation"
          }
        },
        "required": [
          "url"
        ]
      }
    },
    {
      "name": "playwright_expect_response",
      "description": "Ask Playwright to start waiting for a HTTP response. This tool initiates the wait operation but does not wait for its completion.",
      "input_schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique & arbitrary identifier to be used for retrieving this response later with `Playwright_assert_response`."
          },
          "url": {
            "type": "string",
            "description": "URL pattern to match in the response."
          }
        },
        "required": [
          "id",
          "url"
        ]
      }
    },
    {
      "name": "playwright_assert_response",
      "description": "Wait for and validate a previously initiated HTTP response wait operation.",
      "input_schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the HTTP response initially expected using `Playwright_expect_response`."
          },
          "value": {
            "type": "string",
            "description": "Data to expect in the body of the HTTP response. If provided, the assertion will fail if this value is not found in the response body."
          }
        },
        "required": [
          "id"
        ]
      }
    },
    {
      "name": "playwright_custom_user_agent",
      "description": "Set a custom User Agent for the browser",
      "input_schema": {
        "type": "object",
        "properties": {
          "userAgent": {
            "type": "string",
            "description": "Custom User Agent for the Playwright browser instance"
          }
        },
        "required": [
          "userAgent"
        ]
      }
    },
    {
      "name": "playwright_get_visible_text",
      "description": "Get the visible text content of the current page",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      }
    },
    {
      "name": "playwright_get_visible_html",
      "description": "Get the HTML content of the current page",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      }
    },
    {
      "name": "playwright_go_back",
      "description": "Navigate back in browser history",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      }
    },
    {
      "name": "playwright_go_forward",
      "description": "Navigate forward in browser history",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      }
    },
    {
      "name": "playwright_drag",
      "description": "Drag an element to a target location",
      "input_schema": {
        "type": "object",
        "properties": {
          "sourceSelector": {
            "type": "string",
            "description": "CSS selector for the element to drag"
          },
          "targetSelector": {
            "type": "string",
            "description": "CSS selector for the target location"
          }
        },
        "required": [
          "sourceSelector",
          "targetSelector"
        ]
      }
    },
    {
      "name": "playwright_press_key",
      "description": "Press a keyboard key",
      "input_schema": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key to press (e.g. 'Enter', 'ArrowDown', 'a')"
          },
          "selector": {
            "type": "string",
            "description": "Optional CSS selector to focus before pressing key"
          }
        },
        "required": [
          "key"
        ]
      }
    },
    {
      "name": "playwright_save_as_pdf",
      "description": "Save the current page as a PDF file",
      "input_schema": {
        "type": "object",
        "properties": {
          "outputPath": {
            "type": "string",
            "description": "Directory path where PDF will be saved"
          },
          "filename": {
            "type": "string",
            "description": "Name of the PDF file (default: page.pdf)"
          },
          "format": {
            "type": "string",
            "description": "Page format (e.g. 'A4', 'Letter')"
          },
          "printBackground": {
            "type": "boolean",
            "description": "Whether to print background graphics"
          },
          "margin": {
            "type": "object",
            "description": "Page margins",
            "properties": {
              "top": {
                "type": "string"
              },
              "right": {
                "type": "string"
              },
              "bottom": {
                "type": "string"
              },
              "left": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "outputPath"
        ]
      }
    },
    {
      "name": "playwright_click_and_switch_tab",
      "description": "Click a link and switch to the newly opened tab",
      "input_schema": {
        "type": "object",
        "properties": {
          "selector": {
            "type": "string",
            "description": "CSS selector for the link to click"
          }
        },
        "required": [
          "selector"
        ]
      }
    }
  ],
  "description": "Playwright MCP Server is a Model Context Protocol server that provides browser automation capabilities using Playwright. It enables LLMs to interact with web pages, take screenshots, generate test code, and execute JavaScript in a real browser environment. Key features include web scraping, test code generation, and real-time event streaming via Server-Sent Events (SSE)."
}
